openapi: 3.0.0
servers:
  - url: http://localhost:5000/v1
    description: Development server
info:
  description: |
    Flask API - Documentation
  version: 1.0.0
  title: Flask API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: cuong-luu@mk1technology.vn
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Users
    description: Role = ADMIN
  - name: Auth
    description: Registration and Login
  - name: SocialAuth
    description: Authentication via OAuth2
  - name: Email
    description: Email verification
paths:
  /users:
    post:
      description: 'Add user'
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersPost'
      responses:
        '200':
          description: 'User was added!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: 'User with that username or email already exists.<br />or<br />Email, Username, Name and Password must be provided.'
    get:
      description: Get all users
      tags:
        - Users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number to fetch
        - in: query
          name: per_page
          schema:
            type: integer
          required: false
          description: Number of items to fetch per page
        - in: query
          name: filter
          schema:
            type: string
          required: false
          description: Provides filtering capabilities. Can use table field names with comparison operators such as < > != == as well as operators 'and', 'or', etc. Usage example -> filter=(id < 3).
        - in: query
          name: order_by
          schema:
            type: string
          required: false
          description: Default ordering is descending order of created time. This parameter can be used to sort manually. Usage example -> order_by=(id desc).
        - $ref: '#/components/parameters/acceptHeaderParam'
      responses:
        '200':
          description: Paginated list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
  /users/{user_id}:
    get:
      description: Get single user details
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
        - name: user_id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Get single user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'User does not exist.'
    put:
      description: Updates User
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
        - name: user_id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersPost'
      responses:
        '200':
          description: User was updated!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User does not exist.
    delete:
      description: Deletes a user based on a user ID
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
        - name: user_id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: User was deleted!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User does not exist.
  /auth/register:
    post:
      description: New user registration
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegister'
      responses:
        '200':
          description: Successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAuth'
        '400':
          description: 'User with that username already exists.<br />or<br />User with that email already exists.'
      security: []
  /auth/login:
    post:
      description: User login
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAuth'
        '404':
          description: 'User does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security: []
  /auth/logout:
    get:
      description: Logs a user out
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      responses:
        '200':
          description: Successfully logged out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/status:
    get:
      description: Returns the logged in user's status
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/password_recovery:
    post:
      description: Creates a password_recovery_hash and sends email to user
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecovery'
      responses:
        '200':
          description: Password recovery email sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Email does not exist.
      security: []
  /auth/password_reset:
    put:
      description: Reset user password
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          description: Successfully reset password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security: []
  /auth/password_change:
    put:
      description: Changes user password
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '200':
          description: Successfully changed password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid current password. Please try again.
  /auth/facebook/login:
    get:
      description: Redirects user to Facebook for OAuth2 login.
      tags:
        - SocialAuth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      responses:
        '200':
          description: Success! Logged in with Facebook.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAuth'
        '400':
          description: Something went wrong with Facebook. Try again.
      security: []
  /auth/github/login:
    get:
      description: Redirects user to Github for OAuth2 login.
      tags:
        - SocialAuth
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      responses:
        '200':
          description: Success! Logged in with Github.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAuth'
        '400':
          description: Something went wrong with Github. Try again.
      security: []
  /email_verification:
    put:
      description: Creates a email_token_hash and sends email with token to user
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/acceptHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          description: Successfully sent email with email verification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /email_verification/{token}:
    get:
      description: Verifies email with given token
      tags:
        - Email
      parameters:
        - name: token
          in: path
          description: JWT token received in email for verification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful email verification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Verification link expired.
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  parameters:
    acceptHeaderParam:
      in: header
      name: Accept
      required: true
      schema:
        type: string
        default: application/json
      description: Accept HTTP header default value (application/json)
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        username:
          type: string
        name:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        role:
          type: integer
          format: int64
        role_name:
          type: string
        social_type:
          type: string
        email_validation_date:
          type: string
          format: date-time
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/User'
    AuthRegister:
      type: object
      required:
        - username
        - email
        - name
        - password
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        name:
          type: string
    UsersPost:
      type: object
      required:
        - username
        - email
        - name
        - password
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        name:
          type: string
        role:
          type: integer
          format: int64
    UsersPut:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        name:
          type: string
        role:
          type: integer
          format: int64
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    PasswordRecovery:
      type: object
      required:
        - email
      properties:
        email:
          type: string
    PasswordReset:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
        password:
          type: string
    PasswordChange:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
        new_password:
          type: string
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
      required:
        - status
        - message
    ApiResponseAuth:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            auth_token:
              type: string
          required:
            - auth_token
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthRegister'
      description: List of user object
      required: true
  responses:
    ServerError:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
